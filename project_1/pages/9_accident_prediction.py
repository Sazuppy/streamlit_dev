import streamlit as st
import numpy as np
import pandas as pd
import pickle 
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler, OneHotEncoder
import datetime

st.set_page_config(page_title="# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –î–¢–ü –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –¥–≤–∏–∂–µ–Ω–∏—è.", page_icon="üìà")

st.markdown('# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –î–¢–ü –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –¥–≤–∏–∂–µ–Ω–∏—è.')

st.write(
    """–¶–µ–ª—å:   
–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–≥–ª–∞ –±—ã –æ—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫ –î–¢–ü –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –¥–≤–∏–∂–µ–Ω–∏—è. 
–ü–æ–¥ —Ä–∏—Å–∫–æ–º –ø–æ–Ω–∏–º–∞–µ—Ç—Å—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –î–¢–ü —Å –ª—é–±—ã–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞. 
–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —Å–µ–ª –∑–∞ —Ä—É–ª—å –∏ –≤—ã–±—Ä–∞–ª –º–∞—Ä—à—Ä—É—Ç, —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞. 
–ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –≤—ã—Å–æ–∫, –≤–æ–¥–∏—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É.

    """
)

st.sidebar.header("–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")

def changes(df):
    pass

def user_input_features():
    meal = st.sidebar.selectbox('–æ–ø—Ü–∏–∏ –∑–∞–∫–∞–∑–∞', ('BB', 'FB', 'HB', 'SC'))
    country = st.sidebar.selectbox('–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –ø–æ—Å—Ç–æ—è–ª—å—Ü–∞', ('GBR', 'PRT', 'ESP', 'IRL', 'FRA', 'Others', 'USA', 'DEU', 'BEL', 'CHE', 'NLD', 'ITA', 'BRA', 'AUT'))
    distribution_channel = st.sidebar.selectbox('–∫–∞–Ω–∞–ª –¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏–∏ –∑–∞–∫–∞–∑–∞', ('Direct', 'TA/TO', 'Corporate', 'GDS'))
    reserved_room_type = st.sidebar.selectbox('—Ç–∏–ø –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã', ('A', 'C', 'D', 'E', 'G', 'F', 'B'))
    customer_type = st.sidebar.selectbox('—Ç–∏–ø –∑–∞–∫–∞–∑—á–∏–∫–∞', ('Transient', 'Contract', 'Transient-Party', 'Group'))
    adults = st.sidebar.slider('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –ø–æ—Å—Ç–æ—è–ª—å—Ü–µ–≤', 0, 6, 2)
    children = st.sidebar.slider('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –æ—Ç 3 –¥–æ 14 –ª–µ—Ç', 0, 5, 2)
    babies = st.sidebar.slider('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª–∞–¥–µ–Ω—Ü–µ–≤', 0, 1, 5)
    days_in_waiting_list = st.sidebar.slider('—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', 0, 250, 0)
    previous_cancellations = st.sidebar.slider('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞', 0, 30, 0)
    data_lead = st.sidebar.date_input("–¥–µ–Ω—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", datetime.date(2019, 7, 6))
    end_time = st.sidebar.date_input("–¥–µ–Ω—å –∑–∞–µ–∑–¥–∞", datetime.date(2019, 7, 20))
    count_day = st.sidebar.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è', 0, 31, 0)
    data_back = end_time + datetime.timedelta(days=count_day)
    lead_time = (end_time-data_lead).days
    total_of_special_requests = st.sidebar.slider('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–º–µ—Ç–æ–∫', 0, 8, 0)
    arrival_date_day_of_month = end_time.day
    arrival_date_year = end_time.year
    arrival_date_month = end_time.month
    arrival_date_week_number = end_time.isocalendar()[1]
    
    stays_in_weekend_nights = 0
    stays_in_week_nights = 0
    total_nights = stays_in_weekend_nights + stays_in_week_nights
    current_date = end_time
    while current_date < data_back:
        if current_date.weekday() < 5:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (0) - –ü—è—Ç–Ω–∏—Ü–∞ (4)
            stays_in_week_nights += 1
        else:
            stays_in_weekend_nights += 1
        current_date += datetime.timedelta(days=1)
    
    is_repeated_guest = st.sidebar.selectbox('–ø—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ –≥–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –≤—Ç–æ—Ä–æ–π —Ä–∞–∑', ('Yes', 'No'))
    previous_bookings_not_canceled = st.sidebar.slider('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞', 0, 60, 0)
    required_car_parking_spaces = st.sidebar.selectbox('–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è', ('Yes', 'No'))
    booking_changes = st.sidebar.slider('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', 0, 10, 0)
    
    
    
    data = {'meal': meal,
            'country': country,
            'distribution_channel': distribution_channel,
            'reserved_room_type': reserved_room_type,
            'customer_type': customer_type,
            'lead_time': lead_time,
            'adults': adults,
            'children': children,
            'booking_changes': booking_changes,
            'babies': babies,
            'days_in_waiting_list': days_in_waiting_list,
            'previous_cancellations': previous_cancellations,
            'total_nights': total_nights,
            'total_of_special_requests': total_of_special_requests,
            'arrival_date_day_of_month': arrival_date_day_of_month,
            'arrival_date_year': arrival_date_year,
            'arrival_date_month': arrival_date_month,
            'arrival_date_week_number': arrival_date_week_number,
            'stays_in_weekend_nights': stays_in_weekend_nights,
            'stays_in_week_nights': stays_in_week_nights,
            'is_repeated_guest': is_repeated_guest,
            'previous_bookings_not_canceled': previous_bookings_not_canceled,
            'required_car_parking_spaces': required_car_parking_spaces,
            }
    features = pd.DataFrame(data, index=[0])
    return features

df = user_input_features()
df = df.sort_index(axis=1)

st.subheader('–¢–∞–±–ª–∏—Ü–∞ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –≤–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:')
# st.write(df)

def pre_category(data):
    if data == "Yes":
        return 1
    else:
        return 0
    
def preprocessing_data(df, scaler, ohe):
    df['is_repeated_guest'] = df['is_repeated_guest'].apply(pre_category)
    df['required_car_parking_spaces'] = df['required_car_parking_spaces'].apply(pre_category)
    numeric = ['adults', 'children', 'booking_changes', 'babies', 'days_in_waiting_list', 'previous_cancellations', 'lead_time',
    'total_nights', 'total_of_special_requests', 'arrival_date_day_of_month', 'arrival_date_year', 'arrival_date_month', 
    'arrival_date_week_number', 'stays_in_weekend_nights', 'stays_in_week_nights', 'is_repeated_guest', 'previous_bookings_not_canceled',
    'required_car_parking_spaces', 'booking_changes']
    categorical = ['meal', 'country', 'distribution_channel', 'reserved_room_type', 'customer_type']
    df[numeric] = scaler.transform(df[numeric])
    tmp = pd.DataFrame(ohe.transform(df[categorical]).toarray(), 
                                   columns=ohe.get_feature_names_out(),
                                   index=df.index)
    df.drop(categorical, axis=1, inplace=True)
    df = df.join(tmp).sort_index(axis=1)
    
            
    return pd.DataFrame(df, index=[0])
    
@st.cache_resource
def get_model():
    load_model = pickle.load(open('project_1/models/booking_cancel_pred.pkl', 'rb'))
    ohe_model = pickle.load(open('project_1/models/ohe_booking_cancel_pred.pkl', 'rb'))
    scaler_model = pickle.load(open('project_1/models/scaler_booking_cancel_pred.pkl', 'rb'))
    return load_model, scaler_model, ohe_model

model, sc_model, ohe_model = get_model()

df_new = preprocessing_data(df, sc_model, ohe_model)
# st.write(df_new)
prediction = model.predict(df_new)
prediction_proba = model.predict_proba(df_new)


st.subheader('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')
exited = np.array(['–ö–ª–∏–µ–Ω—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç –±—Ä–æ–Ω—å','–ö–ª–∏–µ–Ω—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç –±—Ä–æ–Ω—å'])
st.write(exited[prediction])

st.subheader('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
st.write(prediction_proba)