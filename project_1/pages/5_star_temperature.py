import streamlit as st
import numpy as np
import pandas as pd
import pickle 
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
from math import ceil
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer

st.set_page_config(page_title="# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–≤–µ–∑–¥—ã", page_icon="üìà")

st.markdown('# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–≤–µ–∑–¥—ã')

with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"):
    st.write("""
        –í–∞–º –ø—Ä–∏—à–ª–∞ –∑–∞–¥–∞—á–∞ –æ—Ç –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏–∏ ¬´–ù–µ–±–æ –Ω–∞ –ª–∞–¥–æ–Ω–∏¬ª: –ø—Ä–∏–¥—É–º–∞—Ç—å, –∫–∞–∫ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–≤—ë–∑–¥. –û–±—ã—á–Ω–æ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É—á—ë–Ω—ã–µ –ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:  
- –ó–∞–∫–æ–Ω —Å–º–µ—â–µ–Ω–∏—è –í–∏–Ω–∞.
- –ó–∞–∫–æ–Ω –°—Ç–µ—Ñ–∞–Ω–∞-–ë–æ–ª—å—Ü–º–∞–Ω–∞.
- –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.  

–ö–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –∏–º–µ–µ—Ç –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã. –û–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è —Ö–æ—á–µ—Ç –≤–Ω–µ–¥—Ä–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–≤—ë–∑–¥, –Ω–∞–¥–µ—è—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º.  
–í –±–∞–∑–µ –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö 240 –∑–≤—ë–∑–¥.
**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏**   
- –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤–µ—Ç–∏–º–æ—Å—Ç—å L/Lo ‚Äî —Å–≤–µ—Ç–∏–º–æ—Å—Ç—å –∑–≤–µ–∑–¥—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –°–æ–ª–Ω—Ü–∞.
- –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å R/Ro ‚Äî —Ä–∞–¥–∏—É—Å –∑–≤–µ–∑–¥—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–¥–∏—É—Å–∞ –°–æ–ª–Ω—Ü–∞.
- –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –∑–≤—ë–∑–¥–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ Mv ‚Äî —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –≤–µ–ª–∏—á–∏–Ω–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∞—è –±–ª–µ—Å–∫ –∑–≤–µ–∑–¥—ã.
- –ó–≤—ë–∑–¥–Ω—ã–π —Ü–≤–µ—Ç (white, red, blue, yellow, yellow-orange –∏ –¥—Ä.) ‚Äî —Ü–≤–µ—Ç –∑–≤–µ–∑–¥—ã, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
- –¢–∏–ø –∑–≤–µ–∑–¥—ã.  
    - 0 - –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π –∫–∞—Ä–ª–∏–∫
    - 1 - –ö—Ä–∞—Å–Ω—ã–π –∫–∞—Ä–ª–∏–∫
    - 2 - –ë–µ–ª—ã–π –∫–∞—Ä–ª–∏–∫
    - 3 - –ó–≤—ë–∑–¥—ã –≥–ª–∞–≤–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - 4 - –°–≤–µ—Ä—Ö–≥–∏–≥–∞–Ω—Ç
    - 5 - –ì–∏–ø–µ—Ä–≥–∏–≥–∞–Ω—Ç  

- –ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ T(K) ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö.  

–í —ç—Ç–æ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã.
 –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:  
–°–≤–µ—Ç–∏–º–æ—Å—Ç—å –°–æ–ª–Ω—Ü–∞ (–∞–Ω–≥–ª. Average Luminosity of Sun)  
 $L_0 = 3.828 \cdot 10^{26}\,–í—Ç$   

–†–∞–¥–∏—É—Å –°–æ–ª–Ω—Ü–∞ (–∞–Ω–≥–ª. Average Radius of Sun)   
 $R_0 = 6.9551\cdot 10^8\,–º$  
    """)


st.sidebar.header("–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")

def star_type_cat(type_star):
    type_dict = {'–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π –∫–∞—Ä–ª–∏–∫':0,
    '–ö—Ä–∞—Å–Ω—ã–π –∫–∞—Ä–ª–∏–∫':1,
    '–ë–µ–ª—ã–π –∫–∞—Ä–ª–∏–∫':2,
    '–ó–≤—ë–∑–¥—ã –≥–ª–∞–≤–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏':3,
    '–°–≤–µ—Ä—Ö–≥–∏–≥–∞–Ω—Ç':4,
    '–ì–∏–ø–µ—Ä–≥–∏–≥–∞–Ω—Ç':5 
    }
    return type_dict[type_star]

def user_input_features():
    star_color = st.sidebar.selectbox('—Ü–≤–µ—Ç –∑–≤–µ–∑–¥—ã, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞', ('red', 'blue', 'white', 'blue-white', 'orange', 'yellow-white', 'whitish'))
    luminosity = st.sidebar.slider('—Å–≤–µ—Ç–∏–º–æ—Å—Ç—å –∑–≤–µ–∑–¥—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –°–æ–ª–Ω—Ü–∞', 0.00008, 900000.0, 2000.0)
    radius = st.sidebar.slider('—Ä–∞–¥–∏—É—Å –∑–≤–µ–∑–¥—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–¥–∏—É—Å–∞ –°–æ–ª–Ω—Ü–∞', 0.007, 2000.0, 200.0)
    abs_magnitude = st.sidebar.slider('—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –≤–µ–ª–∏—á–∏–Ω–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∞—è –±–ª–µ—Å–∫ –∑–≤–µ–∑–¥—ã', -12.0, 25.0, 10.0)
    star_type = st.sidebar.selectbox('—Ü–≤–µ—Ç –∑–≤–µ–∑–¥—ã, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞', ('–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π –∫–∞—Ä–ª–∏–∫', '–ö—Ä–∞—Å–Ω—ã–π –∫–∞—Ä–ª–∏–∫', '–ë–µ–ª—ã–π –∫–∞—Ä–ª–∏–∫', '–ó–≤—ë–∑–¥—ã –≥–ª–∞–≤–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                                                                                                         '–°–≤–µ—Ä—Ö–≥–∏–≥–∞–Ω—Ç', '–ì–∏–ø–µ—Ä–≥–∏–≥–∞–Ω—Ç'))
    
    data = {'luminosity': luminosity,
            'radius':radius,
            'abs_magnitude':abs_magnitude,
            'star_color':star_color,
            'star_type':star_type
            }
    features = pd.DataFrame(data, index=[0])
    return features

df = user_input_features()
df = df.sort_index(axis=1)

st.subheader('–¢–∞–±–ª–∏—Ü–∞ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –≤–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:')
st.write(df)
   
def preprocessing_data(df, scaler, ohe):
    df['star_type']=df['star_type'].apply(star_type_cat)
    numeric = ['luminosity', 'radius', 'abs_magnitude']
    categorial = ['star_color', 'star_type']
    df[numeric] = scaler.transform(df[numeric])
    tmp = pd.DataFrame(ohe.transform(df[categorial]).toarray(), 
                                   columns=ohe.get_feature_names_out(),
                                   index=df.index)
    df.drop(categorial, axis=1, inplace=True)
    df = df.join(tmp).sort_index(axis=1)
    df = torch.FloatTensor(df.values)
    return df

class Net(nn.Module):
    def __init__(self, input_size, hidden_size1, hidden_size2, num_classes):
        super(Net, self).__init__()
        
        self.fc1 = nn.Linear(input_size, hidden_size1)
        self.act1 = nn.Tanh()
        
        self.fc2 = nn.Linear(hidden_size1, hidden_size2)
        self.act2 = nn.ReLU()
        
        self.fc3 = nn.Linear(hidden_size2, num_classes)
        
        
        
    def forward(self, x):
        out = self.fc1(x)
        out = self.act1(out)
        
        out = self.fc2(out)
        out = self.act2(out)
        
        out = self.fc3(out)
        
        return out    


def get_model_pre():
    ohe_model = pickle.load(open('project_1/models/ohe_star_temperature_pred.pkl', 'rb'))
    scaler_model = pickle.load(open('project_1/models/scaler_star_temperature_pred.pkl', 'rb'))
    return scaler_model, ohe_model

def get_model():
    net = Net(df_new.shape[1], 700, 850, 1)
    net.load_state_dict(torch.load('project_1/models/star_temperature_pred.pkl'))
    net.eval()
    prediction = net.forward(df_new).detach().numpy()[0][0]
    
    return prediction

sc_model, ohe_model = get_model_pre()
df_new = preprocessing_data(df, sc_model, ohe_model)

model_pred = get_model()

st.subheader('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–≤–µ–∑–¥—ã:')
st.write(str(model_pred) + ' K')


