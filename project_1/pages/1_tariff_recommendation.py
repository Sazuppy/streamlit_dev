import streamlit as st
import time
import numpy as np
import pandas as pd
import pickle 
from sklearn.ensemble import RandomForestClassifier

st.set_page_config(page_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤", page_icon="üìà")

st.markdown('# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤')

st.write(
    """–û–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–±–∏–ª—å–Ω–æ–π —Å–≤—è–∑–∏ ¬´–ú–µ–≥–∞–ª–∞–π–Ω¬ª –≤—ã—è—Å–Ω–∏–ª: –º–Ω–æ–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—å–∑—É—é—Ç—Å—è –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏.   
    –ó–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ—è–ª–∞ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã, —Å–ø–æ—Å–æ–±–Ω–æ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ 
    - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: ¬´–°–º–∞—Ä—Ç¬ª –∏–ª–∏ ¬´–£–ª—å—Ç—Ä–∞¬ª.   
    –ë—ã–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –º–æ–¥–µ–ª—å (RandomForestClassifier) –¥–ª—è –∑–∞–¥–∞—á–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–±–µ—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π 
    —Ç–∞—Ä–∏—Ñ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º accuracy (–¥–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤).
    
    –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ–ª—å –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞:     

    * —Åalls ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤,
    * minutes ‚Äî —Å—É–º–º–∞—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö,
    * messages ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ sms-—Å–æ–æ–±—â–µ–Ω–∏–π,
    * mb_used ‚Äî –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫ –≤ –ú–±,
    * is_ultra ‚Äî –∫–∞–∫–∏–º —Ç–∞—Ä–∏—Ñ–æ–º –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ (¬´–£–ª—å—Ç—Ä–∞¬ª ‚Äî 1, ¬´–°–º–∞—Ä—Ç¬ª ‚Äî 0).
    """
)

st.sidebar.header("–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")

def user_input_features():
    calls = st.sidebar.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤', 0, 500, 60)
    minutes = st.sidebar.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç', 0, 3000, 400)
    messages = st.sidebar.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ sms-—Å–æ–æ–±—â–µ–Ω–∏–π', 0, 500, 30)
    mb_used = st.sidebar.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞, –ú–±', 0, 70000, 17000)
    data = {'calls': calls,
            'minutes': minutes,
            'messages': messages,
            'mb_used': mb_used}
    features = pd.DataFrame(data, index=[0])
    return features

df = user_input_features()

st.subheader('–¢–∞–±–ª–∏—Ü–∞ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –≤–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:')
st.write(df)

@st.cache_resource
def get_model():
    load_model = pickle.load(open('project_1/models/tariff_recommendation.pkl', 'rb'))
    return load_model

model = get_model()

prediction = model.predict(df)
prediction_proba = model.predict_proba(df)

st.subheader('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')
tariff = np.array(['Smart','Ultra'])
st.write(tariff[prediction])

st.subheader('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
st.write(prediction_proba)





